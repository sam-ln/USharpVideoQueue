name: Build Release VPM & .unitypackage

on:
  workflow_dispatch:

jobs:

  # Validate Repository Configuration
  config:
    runs-on: ubuntu-latest
    outputs:
      config_package: ${{ steps.config_package.outputs.configPackage }}
    steps:
      - name: Validate Package Config
        id: config_package
        run: |
          if [ "${{ vars.PACKAGE_NAME }}" != "" ]; then
            echo "configPackage=true" >> $GITHUB_OUTPUT;
          else
            echo "configPackage=false" >> $GITHUB_OUTPUT;
          fi

  # Build and release the Package
  build:
    needs: config
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      packagePath: Packages/${{ vars.PACKAGE_NAME }}
    if: needs.config.outputs.config_package == 'true'
    steps:

      # Checkout Local Repository
      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
        with:
          lfs: true

      # Get the Package version based on the package.json file
      - name: Get Version
        id: version
        uses: zoexx/github-action-json-file-properties@b9f36ce6ee6fe2680cd3c32b2c62e22eade7e590
        with:
          file_path: "${{ env.packagePath }}/package.json"
          prop_path: "version"
      
      # Configure the Environment Variables needed for releasing the Package
      - name: Set Environment Variables
        run: |
          echo "zipFile=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.zip" >> $GITHUB_ENV
          echo "unityPackage=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.unitypackage" >> $GITHUB_ENV
          echo "version=${{ steps.version.outputs.value }}" >> $GITHUB_ENV

      # Zip the Package for release (kept under Packages/)
      - name: Create Package Zip
        working-directory: "${{ env.packagePath }}"
        run: zip -r "${{ github.workspace }}/${{ env.zipFile }}" .

      # --- Create a mirror under Assets/ ONLY for the .unitypackage ---
      - name: Prepare Assets Mirror For UnityPackage
        run: |
          mkdir -p "uproj/Assets/${{ vars.PACKAGE_NAME }}"
          rsync -a "${{ env.packagePath }}/" "uproj/Assets/${{ vars.PACKAGE_NAME }}/"

      # Build meta list for the Assets layout, excluding asmdefs and PACKAGE_NAME.asset.meta
      - name: Track Meta Files (Assets layout)
        working-directory: uproj
        run: |
          find "Assets/${{ vars.PACKAGE_NAME }}" -type f -name '*.meta' \
            ! -name '*.asmdef.meta' \
            ! -name "${{ vars.PACKAGE_NAME }}.asset.meta" \
            > metaList

      # Create UnityPackage using the Assets/ mirror
      - name: Create UnityPackage
        uses: pCYSl5EDgo/create-unitypackage@v1.2.3
        with:
          # Paths below are relative to working-folder:
          working-folder: "uproj"                 # root that contains Assets/
          include-files: "metaList"               # the list we just created in uproj/
          package-path: "../${{ env.unityPackage }}"  # write the .unitypackage at repo root

      # Make a release tag of the version from the package.json file 
      - name: Create Tag
        id: tag_version
        uses: rickstaa/action-create-tag@88dbf7ff6fe2405f8e8f6c6fdfd78829bc631f83
        with:
          tag: "v${{ env.version }}"
      
      # Publish the Release to GitHub (draft)
      - name: Make Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          draft: true
          files: |
            ${{ env.zipFile }}
            ${{ env.unityPackage }}
            ${{ env.packagePath }}/package.json
          tag_name: "v${{ env.version }}"
